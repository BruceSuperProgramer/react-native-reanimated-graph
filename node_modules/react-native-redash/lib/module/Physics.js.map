{"version":3,"sources":["Physics.ts"],"names":["snapPoint","value","velocity","points","point","deltas","map","p","Math","abs","minDelta","min","apply","filter"],"mappings":"AAIA,MAAO,IAAMA,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CACvBC,KADuB,CAEvBC,QAFuB,CAGvBC,MAHuB,CAIZ,CACX,UACA,GAAMC,CAAAA,KAAK,CAAGH,KAAK,CAAG,IAAMC,QAA5B,CACA,GAAMG,CAAAA,MAAM,CAAGF,MAAM,CAACG,GAAP,CAAW,SAACC,CAAD,QAAOC,CAAAA,IAAI,CAACC,GAAL,CAASL,KAAK,CAAGG,CAAjB,CAAP,EAAX,CAAf,CACA,GAAMG,CAAAA,QAAQ,CAAGF,IAAI,CAACG,GAAL,CAASC,KAAT,CAAe,IAAf,CAAqBP,MAArB,CAAjB,CACA,MAAOF,CAAAA,MAAM,CAACU,MAAP,CAAc,SAACN,CAAD,QAAOC,CAAAA,IAAI,CAACC,GAAL,CAASL,KAAK,CAAGG,CAAjB,IAAwBG,QAA/B,EAAd,EAAuD,CAAvD,CAAP,CACD,CAVM","sourcesContent":["/**\n * @summary Select a point where the animation should snap to given the value of the gesture and it's velocity.\n * @worklet\n */\nexport const snapPoint = (\n  value: number,\n  velocity: number,\n  points: ReadonlyArray<number>\n): number => {\n  \"worklet\";\n  const point = value + 0.2 * velocity;\n  const deltas = points.map((p) => Math.abs(point - p));\n  const minDelta = Math.min.apply(null, deltas);\n  return points.filter((p) => Math.abs(point - p) === minDelta)[0];\n};\n"]}