{"version":3,"sources":["Animations.ts"],"names":["animationParameter","animationParam","Error","defineAnimation","factory","_WORKLET","withPause","paused","nextAnimation","onFrame","state","now","lastTimestamp","elapsed","value","dt","finished","current","onStart","previousState","callback","withBouncing","lowerBound","upperBound","velocity","_state"],"mappings":"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","sourcesContent":["import Animated from \"react-native-reanimated\";\n\ndeclare let _WORKLET: boolean;\n\nexport interface AnimationState {\n  current: number;\n}\n\nexport interface PhysicsAnimationState extends AnimationState {\n  velocity: number;\n}\n\nexport type Animation<\n  State extends AnimationState = AnimationState,\n  PrevState = State\n> = {\n  onFrame: (animation: State, now: number) => boolean;\n  onStart: (\n    animation: State,\n    value: number,\n    now: number,\n    lastAnimation: PrevState\n  ) => void;\n  callback?: () => void;\n} & State;\n\nexport type AnimationParameter<State extends AnimationState = AnimationState> =\n  | Animation<State>\n  | (() => Animation<State>)\n  | number;\n\n/**\n *  @summary Access animations passed as parameters safely on both the UI and JS thread with the proper static types.\n *  Animations can receive other animations as parameter.\n */\nexport const animationParameter = <\n  State extends AnimationState = AnimationState\n>(\n  animationParam: AnimationParameter<State>\n) => {\n  \"worklet\";\n  if (typeof animationParam === \"number\") {\n    throw new Error(\"Expected Animation as parameter\");\n  }\n  return typeof animationParam === \"function\"\n    ? animationParam()\n    : animationParam;\n};\n\n/**\n *  @summary Declare custom animations that can be invoked on both the JS and UI thread.\n *  @example\n *  defineAnimation(() => {\n      \"worklet\";\n      // ...animation code\n      return {\n        animation,\n       start\n      }\n    });\n * @worklet\n */\nexport const defineAnimation = <\n  S extends AnimationState = AnimationState,\n  Prev extends AnimationState = AnimationState\n>(\n  factory: () => Omit<Animation<S, Prev>, keyof S>\n) => {\n  \"worklet\";\n  if (_WORKLET) {\n    return (factory() as unknown) as number;\n  }\n  return (factory as unknown) as number;\n};\n\ninterface PausableAnimation extends AnimationState {\n  lastTimestamp: number;\n  elapsed: number;\n}\n\n/**\n *  @summary Make an animation pausable. The state of the animation (paused or not)\n *  is controlled by a boolean shared value.\n *  @example\n    const progress = useSharedValue(0);\n    const paused = useSharedValue(false);\n    useEffect(() => {\n      progress.value = withPause(withLoop(withTiming(1)), paused);\n    }, []);\n  * @worklet\n */\nexport const withPause = (\n  animationParam: AnimationParameter,\n  paused: Animated.SharedValue<boolean>\n) => {\n  \"worklet\";\n  return defineAnimation<PausableAnimation>(() => {\n    \"worklet\";\n    const nextAnimation = animationParameter(animationParam);\n    const onFrame = (state: PausableAnimation, now: number) => {\n      const { lastTimestamp, elapsed } = state;\n      if (paused.value) {\n        state.elapsed = now - lastTimestamp;\n        return false;\n      }\n      const dt = now - elapsed;\n      const finished = nextAnimation.onFrame(nextAnimation, dt);\n      state.current = nextAnimation.current;\n      state.lastTimestamp = dt;\n      return finished;\n    };\n    const onStart = (\n      state: PausableAnimation,\n      value: number,\n      now: number,\n      previousState: AnimationState\n    ) => {\n      state.lastTimestamp = now;\n      state.elapsed = 0;\n      nextAnimation.onStart(nextAnimation, value, now, previousState);\n    };\n    return {\n      onFrame,\n      onStart,\n      callback: nextAnimation.callback,\n    };\n  });\n};\n\n/**\n *  @summary Add a bouncing behavior to a physics-based animation.\n *  An animation is defined as being physics-based if it contains a velocity in its state.\n *  @example\n    // will bounce if the animations hits the position 0 or 100\n    withBouncing(withDecay({ velocity }), 0, 100)\n * @worklet\n */\nexport const withBouncing = (\n  animationParam: AnimationParameter<PhysicsAnimationState>,\n  lowerBound: number,\n  upperBound: number\n): number => {\n  \"worklet\";\n  return defineAnimation<PhysicsAnimationState, PhysicsAnimationState>(() => {\n    \"worklet\";\n    const nextAnimation = animationParameter(animationParam);\n    const onFrame = (state: PhysicsAnimationState, now: number) => {\n      const finished = nextAnimation.onFrame(nextAnimation, now);\n      const { velocity, current } = nextAnimation;\n      state.current = current;\n      if (\n        (velocity < 0 && state.current <= lowerBound) ||\n        (velocity > 0 && state.current >= upperBound)\n      ) {\n        state.current = velocity < 0 ? lowerBound : upperBound;\n        nextAnimation.velocity *= -0.5;\n      }\n      return finished;\n    };\n    const onStart = (\n      _state: PhysicsAnimationState,\n      value: number,\n      now: number,\n      previousState: PhysicsAnimationState\n    ) => {\n      nextAnimation.onStart(nextAnimation, value, now, previousState);\n    };\n    return {\n      onFrame,\n      onStart,\n      callback: nextAnimation.callback,\n    };\n  });\n};\n"]}