{"version":3,"sources":["Transformations.ts"],"names":["Animated","vec","divide","sub","multiply","add","cos","sin","translateZ","perspective","z","scale","translate","translateX","x","translateY","y","transformOrigin","transformations","rotateTranslation","tr","rotate","scaleTranslation"],"mappings":"AAAA,MAAOA,CAAAA,QAAP,KAAqB,yBAArB,CAEA,OAAiBC,GAAjB,KAA4B,WAA5B,C,GAGQC,CAAAA,M,CAAyCF,Q,CAAzCE,M,CAAQC,G,CAAiCH,Q,CAAjCG,G,CAAKC,Q,CAA4BJ,Q,CAA5BI,Q,CAAUC,G,CAAkBL,Q,CAAlBK,G,CAAKC,G,CAAaN,Q,CAAbM,G,CAAKC,G,CAAQP,Q,CAARO,G,CAEzC,MAAO,IAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CACxBC,WADwB,CAExBC,CAFwB,QAGpB,CAAEC,KAAK,CAAET,MAAM,CAACO,WAAD,CAAcN,GAAG,CAACM,WAAD,CAAcC,CAAd,CAAjB,CAAf,CAHoB,EAAnB,CAKP,MAAO,IAAME,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,UAAMC,CAAAA,UAAN,MAAGC,CAAH,CAAqBC,UAArB,MAAkBC,CAAlB,OAA8C,CACrE,CAAEH,UAAU,CAAVA,UAAF,CADqE,CAErE,CAAEE,UAAU,CAAVA,UAAF,CAFqE,CAA9C,EAAlB,CAKP,MAAO,IAAME,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,WAC3BH,CAAAA,CAD2B,OAC3BA,CAD2B,CACxBE,CADwB,OACxBA,CADwB,+BAE1BE,eAF0B,qDAE1BA,eAF0B,iCAI7B,CAAEL,UAAU,CAAEC,CAAd,CAJ6B,CAK7B,CAAEC,UAAU,CAAEC,CAAd,CAL6B,SAM1BE,eAN0B,EAO7B,CAAEL,UAAU,CAAET,QAAQ,CAACU,CAAD,CAAI,CAAC,CAAL,CAAtB,CAP6B,CAQ7B,CAAEC,UAAU,CAAEX,QAAQ,CAACY,CAAD,CAAI,CAAC,CAAL,CAAtB,CAR6B,IAAxB,CAWP,MAAO,IAAMG,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAC/BC,EAD+B,CAE/BC,MAF+B,QAG3B,CACJP,CAAC,CAAEX,GAAG,CAACC,QAAQ,CAACgB,EAAE,CAACN,CAAJ,CAAOR,GAAG,CAACe,MAAD,CAAV,CAAT,CAA8BjB,QAAQ,CAACgB,EAAE,CAACJ,CAAJ,CAAOT,GAAG,CAACc,MAAD,CAAV,CAAtC,CADF,CAEJL,CAAC,CAAEX,GAAG,CAACD,QAAQ,CAACgB,EAAE,CAACN,CAAJ,CAAOP,GAAG,CAACc,MAAD,CAAV,CAAT,CAA8BjB,QAAQ,CAACgB,EAAE,CAACJ,CAAJ,CAAOV,GAAG,CAACe,MAAD,CAAV,CAAtC,CAFF,CAH2B,EAA1B,CAQP,MAAO,IAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAC9BF,EAD8B,CAE9BT,KAF8B,QAG3BV,CAAAA,GAAG,CAACG,QAAJ,CAAagB,EAAb,CAAiBT,KAAjB,CAH2B,EAAzB","sourcesContent":["import Animated from \"react-native-reanimated\";\n\nimport { Vector, vec } from \"./Vectors\";\nimport { Transforms2d } from \"./Matrix3\";\n\nconst { divide, sub, multiply, add, cos, sin } = Animated;\n\nexport const translateZ = (\n  perspective: Animated.Adaptable<number>,\n  z: Animated.Adaptable<number>\n) => ({ scale: divide(perspective, sub(perspective, z)) });\n\nexport const translate = ({ x: translateX, y: translateY }: Vector) => [\n  { translateX },\n  { translateY },\n];\n\nexport const transformOrigin = (\n  { x, y }: Vector,\n  ...transformations: Transforms2d\n): Transforms2d => [\n  { translateX: x },\n  { translateY: y },\n  ...transformations,\n  { translateX: multiply(x, -1) },\n  { translateY: multiply(y, -1) },\n];\n\nexport const rotateTranslation = (\n  tr: Vector,\n  rotate: Animated.Adaptable<number>\n) => ({\n  x: sub(multiply(tr.x, cos(rotate)), multiply(tr.y, sin(rotate))),\n  y: add(multiply(tr.x, sin(rotate)), multiply(tr.y, cos(rotate))),\n});\n\nexport const scaleTranslation = (\n  tr: Vector,\n  scale: Animated.Adaptable<number>\n) => vec.multiply(tr, scale);\n"]}