{"version":3,"sources":["Vectors.ts"],"names":["Animated","clamp","clamp1","Value","block","create","x","y","createValue","isAdaptable","value","Node","get","vectors","dimension","map","vector","apply","fn","add","sub","div","divide","mul","multiply","pow","sqrt","cos","sin","min","max","minVec","maxVec","minus","a","set","b","length","v","normalize","dot","v1","v2","cross","vec"],"mappings":"yEAAA,MAAOA,CAAAA,QAAP,KAAqB,yBAArB,CAEA,OAASC,KAAK,GAAIC,CAAAA,MAAlB,KAAgC,QAAhC,C,GAEQC,CAAAA,K,CAAiBH,Q,CAAjBG,K,CAAOC,K,CAAUJ,Q,CAAVI,K,CAmBf,GAAMC,CAAAA,MAAc,CAAG,QAAjBA,CAAAA,MAAiB,CACrBC,CADqB,CAErBC,CAFqB,iBAGjB,CACJD,CAAC,CAAEA,CAAF,OAAEA,CAAF,CAAO,CADJ,CAEJC,CAAC,OAAEA,CAAF,OAAEA,CAAF,CAAOD,CAAP,aAAY,CAFT,CAHiB,EAAvB,CAQA,GAAME,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,MAACF,CAAAA,CAAD,2DAAK,CAAL,IAAQC,CAAAA,CAAR,iDAClBF,CAAAA,MAAM,CAAC,GAAIF,CAAAA,KAAJ,CAAUG,CAAV,CAAD,CAAe,GAAIH,CAAAA,KAAJ,CAAUI,CAAV,OAAUA,CAAV,CAAeD,CAAf,CAAf,CADY,EAApB,CAGA,GAAMG,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,QAClB,OAAOA,CAAAA,KAAP,GAAiB,QAAjB,EACAA,KAAK,WAAYV,CAAAA,QAAQ,CAACW,IAD1B,EAEAD,KAAK,WAAYV,CAAAA,QAAQ,CAACG,KAHR,EAApB,CAKA,GAAMS,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,CAACC,OAAD,CAAuBC,SAAvB,QACVD,CAAAA,OAAO,CAACE,GAAR,CAAY,SAACC,MAAD,QAAaP,CAAAA,WAAW,CAACO,MAAD,CAAX,CAAsBA,MAAtB,CAA+BA,MAAM,CAACF,SAAD,CAAlD,EAAZ,CADU,EAAZ,CAGA,GAAMG,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,CAACC,EAAD,gCAAYL,OAAZ,qDAAYA,OAAZ,gCAAsC,CAClDP,CAAC,CAAEY,EAAE,MAAF,2BAAMN,GAAG,CAACC,OAAD,CAAU,GAAV,CAAT,EAD+C,CAElDN,CAAC,CAAEW,EAAE,MAAF,2BAAMN,GAAG,CAACC,OAAD,CAAU,GAAV,CAAT,EAF+C,CAAtC,EAAd,CAKA,GAAMM,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,kCAAIN,OAAJ,+CAAIA,OAAJ,gCAA0BI,CAAAA,KAAK,MAAL,SAAMjB,QAAQ,CAACmB,GAAf,SAAuBN,OAAvB,EAA1B,EAAZ,CACA,GAAMO,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,kCAAIP,OAAJ,+CAAIA,OAAJ,gCAA0BI,CAAAA,KAAK,MAAL,SAAMjB,QAAQ,CAACoB,GAAf,SAAuBP,OAAvB,EAA1B,EAAZ,CACA,GAAMQ,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,kCAAIR,OAAJ,+CAAIA,OAAJ,gCAA0BI,CAAAA,KAAK,MAAL,SAAMjB,QAAQ,CAACsB,MAAf,SAA0BT,OAA1B,EAA1B,EAAZ,CACA,GAAMU,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,kCAAIV,OAAJ,+CAAIA,OAAJ,gCAA0BI,CAAAA,KAAK,MAAL,SAAMjB,QAAQ,CAACwB,QAAf,SAA4BX,OAA5B,EAA1B,EAAZ,CACA,GAAMY,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,kCAAIZ,OAAJ,+CAAIA,OAAJ,gCACVI,CAAAA,KAAK,MAAL,SAAMjB,QAAQ,CAACyB,GAAf,SAAuBZ,OAAvB,EADU,EAAZ,CAEA,GAAMa,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,kCAAIb,OAAJ,+CAAIA,OAAJ,gCAA6BI,CAAAA,KAAK,MAAL,SAAMjB,QAAQ,CAAC0B,IAAf,SAAwBb,OAAxB,EAA7B,EAAb,CACA,GAAMc,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,kCAAId,OAAJ,+CAAIA,OAAJ,gCAA6BI,CAAAA,KAAK,MAAL,SAAMjB,QAAQ,CAAC2B,GAAf,SAAuBd,OAAvB,EAA7B,EAAZ,CACA,GAAMe,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,kCAAIf,OAAJ,+CAAIA,OAAJ,gCAA6BI,CAAAA,KAAK,MAAL,SAAMjB,QAAQ,CAAC4B,GAAf,SAAuBf,OAAvB,EAA7B,EAAZ,CACA,GAAMgB,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,CAACb,MAAD,CAAoBN,KAApB,QACVO,CAAAA,KAAK,CAACjB,QAAQ,CAAC6B,GAAV,CAAeb,MAAf,CAAuBN,KAAvB,CADK,EAAZ,CAEA,GAAMoB,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,CAACd,MAAD,CAAoBN,KAApB,QACVO,CAAAA,KAAK,CAACjB,QAAQ,CAAC8B,GAAV,CAAed,MAAf,CAAuBN,KAAvB,CADK,EAAZ,CAEA,GAAMT,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,CAACS,KAAD,CAAmBqB,MAAnB,CAAsCC,MAAtC,QACZf,CAAAA,KAAK,CAACf,MAAD,CAASQ,KAAT,CAAgBqB,MAAhB,CAAwBC,MAAxB,CADO,EAAd,CAGA,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,CAACC,CAAD,QAAkBX,CAAAA,GAAG,CAAC,CAAC,CAAF,CAAKW,CAAL,CAArB,EAAd,CAEA,GAAMC,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,CAACD,CAAD,CAAoCE,CAApC,QACVhC,CAAAA,KAAK,CAAC,CACJJ,QAAQ,CAACmC,GAAT,CAAaD,CAAC,CAAC5B,CAAf,CAAkBG,WAAW,CAAC2B,CAAD,CAAX,CAAiBA,CAAjB,CAAqBA,CAAC,CAAC9B,CAAzC,CADI,CAEJN,QAAQ,CAACmC,GAAT,CAAaD,CAAC,CAAC3B,CAAf,CAAkBE,WAAW,CAAC2B,CAAD,CAAX,CAAiBA,CAAjB,CAAqBA,CAAC,CAAC7B,CAAzC,CAFI,CAAD,CADK,EAAZ,CAMA,GAAM8B,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACC,CAAD,QACbtC,CAAAA,QAAQ,CAAC0B,IAAT,CAAc1B,QAAQ,CAACmB,GAAT,CAAanB,QAAQ,CAACyB,GAAT,CAAaa,CAAC,CAAChC,CAAf,CAAkB,CAAlB,CAAb,CAAmCN,QAAQ,CAACyB,GAAT,CAAaa,CAAC,CAAC/B,CAAf,CAAkB,CAAlB,CAAnC,CAAd,CADa,EAAf,CAEA,GAAMgC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACD,CAAD,QAAejB,CAAAA,GAAG,CAACiB,CAAD,CAAID,MAAM,CAACC,CAAD,CAAV,CAAlB,EAAlB,CACA,GAAME,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,CAACC,EAAD,CAAaC,EAAb,QACVvB,CAAAA,GAAG,CAACnB,QAAQ,CAACwB,QAAT,CAAkBiB,EAAE,CAACnC,CAArB,CAAwBoC,EAAE,CAACpC,CAA3B,CAAD,CAAgCN,QAAQ,CAACwB,QAAT,CAAkBiB,EAAE,CAAClC,CAArB,CAAwBmC,EAAE,CAACnC,CAA3B,CAAhC,CADO,EAAZ,CAEA,GAAMoC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,CAACF,EAAD,CAAaC,EAAb,QACZtB,CAAAA,GAAG,CAACpB,QAAQ,CAACwB,QAAT,CAAkBiB,EAAE,CAACnC,CAArB,CAAwBoC,EAAE,CAACnC,CAA3B,CAAD,CAAgCP,QAAQ,CAACwB,QAAT,CAAkBiB,EAAE,CAAClC,CAArB,CAAwBmC,EAAE,CAACpC,CAA3B,CAAhC,CADS,EAAd,CAGA,MAAO,IAAMsC,CAAAA,GAAG,CAAG,CACjBvC,MAAM,CAANA,MADiB,CAEjBG,WAAW,CAAXA,WAFiB,CAGjByB,KAAK,CAALA,KAHiB,CAIjBd,GAAG,CAAHA,GAJiB,CAKjBC,GAAG,CAAHA,GALiB,CAMjBoB,GAAG,CAAHA,GANiB,CAOjBnB,GAAG,CAAHA,GAPiB,CAQjBE,GAAG,CAAHA,GARiB,CASjBC,QAAQ,CAAED,GATO,CAUjBD,MAAM,CAAED,GAVS,CAWjBI,GAAG,CAAHA,GAXiB,CAYjBC,IAAI,CAAJA,IAZiB,CAajBS,GAAG,CAAHA,GAbiB,CAcjBlC,KAAK,CAALA,KAdiB,CAejBgB,KAAK,CAALA,KAfiB,CAgBjBY,GAAG,CAAHA,GAhBiB,CAiBjBC,GAAG,CAAHA,GAjBiB,CAkBjBH,GAAG,CAAHA,GAlBiB,CAmBjBC,GAAG,CAAHA,GAnBiB,CAoBjBS,MAAM,CAANA,MApBiB,CAqBjBE,SAAS,CAATA,SArBiB,CAsBjBI,KAAK,CAALA,KAtBiB,CAAZ","sourcesContent":["import Animated from \"react-native-reanimated\";\n\nimport { clamp as clamp1 } from \"./Math\";\n\nconst { Value, block } = Animated;\ntype Dimension = \"x\" | \"y\";\ntype Fn = (...args: Animated.Adaptable<number>[]) => Animated.Node<number>;\ntype Adaptable = Vector | Animated.Adaptable<number>;\ntype SingleArgOp<T extends Adaptable = Adaptable> = [T];\ntype BinArgOp<T extends Adaptable = Adaptable> = [T, T, ...T[]];\n\nexport interface Vector<\n  T extends Animated.Adaptable<number> = Animated.Adaptable<number>\n> {\n  x: T;\n  y: T;\n}\n\ntype Create = {\n  (): Vector<0>;\n  <T extends Animated.Adaptable<number>>(x: T, y?: T): Vector<T>;\n};\n\nconst create: Create = <T extends Animated.Adaptable<number>>(\n  x?: T,\n  y?: T\n) => ({\n  x: x ?? 0,\n  y: y ?? x ?? 0,\n});\n\nconst createValue = (x = 0, y?: number) =>\n  create(new Value(x), new Value(y ?? x));\n\nconst isAdaptable = (value: Adaptable): value is Animated.Adaptable<number> =>\n  typeof value === \"number\" ||\n  value instanceof Animated.Node ||\n  value instanceof Animated.Value;\n\nconst get = (vectors: Adaptable[], dimension: Dimension) =>\n  vectors.map((vector) => (isAdaptable(vector) ? vector : vector[dimension]));\n\nconst apply = (fn: Fn, ...vectors: Adaptable[]) => ({\n  x: fn(...get(vectors, \"x\")),\n  y: fn(...get(vectors, \"y\")),\n});\n\nconst add = (...vectors: BinArgOp) => apply(Animated.add, ...vectors);\nconst sub = (...vectors: BinArgOp) => apply(Animated.sub, ...vectors);\nconst div = (...vectors: BinArgOp) => apply(Animated.divide, ...vectors);\nconst mul = (...vectors: BinArgOp) => apply(Animated.multiply, ...vectors);\nconst pow = (...vectors: [Adaptable, number]) =>\n  apply(Animated.pow, ...vectors);\nconst sqrt = (...vectors: SingleArgOp) => apply(Animated.sqrt, ...vectors);\nconst cos = (...vectors: SingleArgOp) => apply(Animated.cos, ...vectors);\nconst sin = (...vectors: SingleArgOp) => apply(Animated.sin, ...vectors);\nconst min = (vector: Adaptable, value: Animated.Adaptable<number>) =>\n  apply(Animated.min, vector, value);\nconst max = (vector: Adaptable, value: Animated.Adaptable<number>) =>\n  apply(Animated.max, vector, value);\nconst clamp = (value: Adaptable, minVec: Adaptable, maxVec: Adaptable) =>\n  apply(clamp1, value, minVec, maxVec);\n\nconst minus = (a: Adaptable) => mul(-1, a);\n\nconst set = (a: Vector<Animated.Value<number>>, b: Adaptable) =>\n  block([\n    Animated.set(a.x, isAdaptable(b) ? b : b.x),\n    Animated.set(a.y, isAdaptable(b) ? b : b.y),\n  ]);\n\nconst length = (v: Vector) =>\n  Animated.sqrt(Animated.add(Animated.pow(v.x, 2), Animated.pow(v.y, 2)));\nconst normalize = (v: Vector) => div(v, length(v));\nconst dot = (v1: Vector, v2: Vector) =>\n  add(Animated.multiply(v1.x, v2.x), Animated.multiply(v1.y, v2.y));\nconst cross = (v1: Vector, v2: Vector) =>\n  sub(Animated.multiply(v1.x, v2.y), Animated.multiply(v1.y, v2.x));\n\nexport const vec = {\n  create,\n  createValue,\n  minus,\n  add,\n  sub,\n  dot,\n  div,\n  mul,\n  multiply: mul,\n  divide: div,\n  pow,\n  sqrt,\n  set,\n  clamp,\n  apply,\n  min,\n  max,\n  cos,\n  sin,\n  length,\n  normalize,\n  cross,\n};\n"]}