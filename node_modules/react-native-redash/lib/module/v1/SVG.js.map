{"version":3,"sources":["SVG.ts"],"names":["Animated","parseSVG","absSVG","normalizeSVG","interpolateNode","get","string","cubicBezier","cubicBezierLength","cubicBezierSolve","Value","lessOrEq","greaterOrEq","and","cond","multiply","lessThan","concat","add","MX","MY","CX1","CY1","CX2","CY2","CX","CY","parsePath","d","move","curves","parts","map","curve","index","prevCurve","p0","x","y","p1","p2","p3","length","segments","part","start","slice","reduce","acc","p","end","p0x","p3x","totalLength","segment","p0y","p1x","p1y","p2x","p2y","p3y","getPointAtLength","path","notFound","i","t","inputRange","outputRange","interpolatePath","value","config","paths","commands","_","interpolatePoint","point","mx","my","bInterpolatePath","path1","path2","getLengthAtX","l"],"mappings":"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","sourcesContent":["import Animated from \"react-native-reanimated\";\nimport parseSVG from \"parse-svg-path\";\nimport absSVG from \"abs-svg-path\";\nimport normalizeSVG from \"normalize-svg-path\";\nimport interpolateNode from \"react-native-reanimated/src/derived/interpolate\";\n\nimport { get } from \"./Array\";\nimport { string } from \"./String\";\nimport { cubicBezier } from \"./Math\";\nimport cubicBezierLength from \"./bezier/CubicBezierLength\";\nimport cubicBezierSolve from \"./bezier/CubicBezierSolve\";\n\nconst {\n  Value,\n  lessOrEq,\n  greaterOrEq,\n  and,\n  cond,\n  multiply,\n  lessThan,\n  concat,\n  add,\n} = Animated;\n\n// const COMMAND = 0;\nconst MX = 1;\nconst MY = 2;\nconst CX1 = 1;\nconst CY1 = 2;\nconst CX2 = 3;\nconst CY2 = 4;\nconst CX = 5;\nconst CY = 6;\n\ntype SVGMoveCommand = [\"M\", number, number];\ntype SVGCurveCommand = [\"C\", number, number, number, number, number, number];\ntype SVGNormalizedCommands = [SVGMoveCommand, ...SVGCurveCommand[]];\ntype BezierPoint =\n  | \"p0x\"\n  | \"p0y\"\n  | \"p1x\"\n  | \"p1y\"\n  | \"p2x\"\n  | \"p2y\"\n  | \"p3x\"\n  | \"p3y\";\n\ninterface Point {\n  x: number;\n  y: number;\n}\n\ninterface BezierCubicCurve {\n  length: number;\n  p0: Point;\n  p1: Point;\n  p2: Point;\n  p3: Point;\n}\n\nexport interface PathInterpolationConfig {\n  inputRange: readonly Animated.Adaptable<number>[];\n  outputRange: readonly (ReanimatedPath | string)[];\n  extrapolate?: Animated.Extrapolate;\n  extrapolateLeft?: Animated.Extrapolate;\n  extrapolateRight?: Animated.Extrapolate;\n}\n\nexport interface ReanimatedPath {\n  totalLength: number;\n  segments: { start: number; end: number; p0x: number; p3x: number }[];\n  length: number[];\n  start: number[];\n  end: number[];\n  p0x: number[];\n  p0y: number[];\n  p1x: number[];\n  p1y: number[];\n  p2x: number[];\n  p2y: number[];\n  p3x: number[];\n  p3y: number[];\n}\n\nexport const parsePath = (d: string): ReanimatedPath => {\n  const [move, ...curves]: SVGNormalizedCommands = normalizeSVG(\n    absSVG(parseSVG(d))\n  );\n  const parts: BezierCubicCurve[] = curves.map((curve, index) => {\n    const prevCurve = curves[index - 1];\n    const p0 =\n      index === 0\n        ? { x: move[MX], y: move[MY] }\n        : { x: prevCurve[CX], y: prevCurve[CY] };\n    const p1 = { x: curve[CX1], y: curve[CY1] };\n    const p2 = { x: curve[CX2], y: curve[CY2] };\n    const p3 = { x: curve[CX], y: curve[CY] };\n    const length = cubicBezierLength(p0, p1, p2, p3);\n    return {\n      p0,\n      p1,\n      p2,\n      p3,\n      length,\n    };\n  });\n  const segments = parts.map((part, index) => {\n    const start = parts.slice(0, index).reduce((acc, p) => acc + p.length, 0);\n    const end = start + part.length;\n    return {\n      start,\n      end,\n      p0x: part.p0.x,\n      p3x: part.p3.x,\n    };\n  });\n  return {\n    segments,\n    totalLength: parts.reduce((acc, part) => acc + part.length, 0),\n    length: parts.map((part) => part.length),\n    start: segments.map((segment) => segment.start),\n    end: segments.map((segment) => segment.end),\n    p0x: parts.map((part) => part.p0.x),\n    p0y: parts.map((part) => part.p0.y),\n    p1x: parts.map((part) => part.p1.x),\n    p1y: parts.map((part) => part.p1.y),\n    p2x: parts.map((part) => part.p2.x),\n    p2y: parts.map((part) => part.p2.y),\n    p3x: parts.map((part) => part.p3.x),\n    p3y: parts.map((part) => part.p3.y),\n  };\n};\n\nexport const getPointAtLength = (\n  path: ReanimatedPath,\n  length: Animated.Adaptable<number>\n): { x: Animated.Node<number>; y: Animated.Node<number> } => {\n  const notFound: Animated.Node<number> = new Value(-1);\n  const index = path.segments.reduce(\n    (acc, p, i) =>\n      cond(and(greaterOrEq(length, p.start), lessOrEq(length, p.end)), i, acc),\n    notFound\n  );\n  const start = get(path.start, index);\n  const end = get(path.end, index);\n\n  const p0x = get(path.p0x, index);\n  const p1x = get(path.p1x, index);\n  const p2x = get(path.p2x, index);\n  const p3x = get(path.p3x, index);\n\n  const p0y = get(path.p0y, index);\n  const p1y = get(path.p1y, index);\n  const p2y = get(path.p2y, index);\n  const p3y = get(path.p3y, index);\n  const t = interpolateNode(length, {\n    inputRange: [start, end],\n    outputRange: [0, 1],\n  });\n  return {\n    x: cubicBezier(t, p0x, p1x, p2x, p3x),\n    y: cubicBezier(t, p0y, p1y, p2y, p3y),\n  };\n};\n\nexport const interpolatePath = (\n  value: Animated.Adaptable<number>,\n  { inputRange, outputRange, ...config }: PathInterpolationConfig\n): Animated.Node<string> => {\n  const paths = outputRange.map((path) =>\n    typeof path === \"string\" ? parsePath(path) : path\n  );\n  const [path] = paths;\n  const commands = path.segments.map((_, index) => {\n    const interpolatePoint = (point: BezierPoint) =>\n      interpolateNode(value, {\n        inputRange,\n        outputRange: paths.map((p) => p[point][index]),\n        ...config,\n      });\n\n    const mx = interpolatePoint(\"p0x\");\n    const my = interpolatePoint(\"p0y\");\n\n    const p1x = interpolatePoint(\"p1x\");\n    const p1y = interpolatePoint(\"p1y\");\n\n    const p2x = interpolatePoint(\"p2x\");\n    const p2y = interpolatePoint(\"p2y\");\n\n    const p3x = interpolatePoint(\"p3x\");\n    const p3y = interpolatePoint(\"p3y\");\n\n    return string`${\n      index === 0 ? string`M${mx},${my} ` : \"\"\n    }C${p1x},${p1y} ${p2x},${p2y} ${p3x},${p3y}`;\n  });\n  return concat(...commands);\n};\n\nexport const bInterpolatePath = (\n  value: Animated.Value<number>,\n  path1: ReanimatedPath | string,\n  path2: ReanimatedPath | string\n): Animated.Node<string> =>\n  interpolatePath(value, {\n    inputRange: [0, 1],\n    outputRange: [path1, path2],\n  });\n\n// https://pomax.github.io/bezierinfo/#yforx\nexport const getLengthAtX = (\n  path: ReanimatedPath,\n  x: Animated.Adaptable<number>\n): Animated.Node<number> => {\n  const notFound: Animated.Node<number> = new Value(-1);\n  const index = path.segments.reduce(\n    (acc, p, i) => cond(and(greaterOrEq(x, p.p0x), lessOrEq(x, p.p3x)), i, acc),\n    notFound\n  );\n  const p0 = get(path.p0x, index);\n  const p1 = get(path.p1x, index);\n  const p2 = get(path.p2x, index);\n  const p3 = get(path.p3x, index);\n  const t = cubicBezierSolve(p0, p1, p2, p3);\n  const length = get(path.length, index);\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  const start = add(\n    ...(path.length.map((l, i) => cond(lessThan(i, index), l, 0)) as [\n      any,\n      any,\n      ...any[]\n    ])\n  );\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n  return add(start, multiply(t, length));\n};\n"]}