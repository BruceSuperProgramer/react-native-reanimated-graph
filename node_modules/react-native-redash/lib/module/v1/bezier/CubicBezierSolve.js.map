{"version":3,"sources":["CubicBezierSolve.ts"],"names":["Animated","find","approximates","Value","and","cond","divide","add","multiply","block","greaterThan","eq","lessThan","pow","sqrt","set","sub","cos","not","acos","isRootValidForCubicBezier","root","cuberoot","v","cubicBezierSolve","pa","pb","pc","pd","a","b","c","d","root1","root2","root3","q","q2","p","p3","discriminant","mp3","mp33","r","t","cosphi","phi","crtr","t1","u1","sd","v1","sq","Math","PI"],"mappings":"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","sourcesContent":["import Animated from \"react-native-reanimated\";\n\nimport { find } from \"../Array\";\nimport { approximates } from \"../Math\";\n\nconst {\n  Value,\n  and,\n  cond,\n  divide,\n  add,\n  multiply,\n  block,\n  greaterThan,\n  eq,\n  lessThan,\n  pow,\n  sqrt,\n  set,\n  sub,\n  cos,\n  not,\n  acos,\n} = Animated;\n\nconst isRootValidForCubicBezier = (root: Animated.Node<number>) =>\n  and(greaterThan(root, 0), lessThan(root, 1));\n\n// pomax.github.io/bezierinfo/#extremities\nconst cuberoot = (v: Animated.Adaptable<number>) =>\n  cond(\n    lessThan(v, 0),\n    multiply(pow(multiply(v, -1), 1 / 3), -1),\n    pow(v, 1 / 3)\n  );\n\nconst cubicBezierSolve = (\n  pa: Animated.Adaptable<number>,\n  pb: Animated.Adaptable<number>,\n  pc: Animated.Adaptable<number>,\n  pd: Animated.Adaptable<number>\n): Animated.Node<number> => {\n  const a: Animated.Value<number> = new Value();\n  const b: Animated.Value<number> = new Value();\n  const c: Animated.Value<number> = new Value();\n  const d: Animated.Value<number> = new Value();\n  const root1: Animated.Value<number> = new Value();\n  const root2: Animated.Value<number> = new Value();\n  const root3: Animated.Value<number> = new Value();\n\n  const q: Animated.Value<number> = new Value();\n  const q2: Animated.Value<number> = new Value();\n  const p: Animated.Value<number> = new Value();\n  const p3: Animated.Value<number> = new Value();\n  const discriminant: Animated.Value<number> = new Value();\n\n  const mp3: Animated.Value<number> = new Value();\n  const mp33: Animated.Value<number> = new Value();\n  const r: Animated.Value<number> = new Value();\n  const t: Animated.Value<number> = new Value();\n  const cosphi: Animated.Value<number> = new Value();\n  const phi: Animated.Value<number> = new Value();\n  const crtr: Animated.Value<number> = new Value();\n  const t1: Animated.Value<number> = new Value();\n\n  const u1: Animated.Value<number> = new Value();\n\n  const sd: Animated.Value<number> = new Value();\n  const v1: Animated.Value<number> = new Value();\n  const sq: Animated.Value<number> = new Value();\n\n  return block([\n    set(a, add(multiply(3, pa), multiply(-6, pb), multiply(3, pc))),\n    set(b, add(multiply(-3, pa), multiply(3, pb))),\n    set(c, pa),\n    set(d, add(multiply(-1, pa), multiply(3, pb), multiply(-3, pc), pd)),\n    cond(\n      approximates(d, 0, 0.001),\n      cond(\n        approximates(d, 0, 0.001),\n        cond(\n          not(approximates(b, 0, 0.001)),\n          set(root1, divide(multiply(-1, c), b)),\n          [\n            set(q, sqrt(sub(pow(b, 2), multiply(4, a, c)))),\n            set(root1, divide(sub(q, b), multiply(2, a))),\n            set(root2, divide(sub(multiply(b, -1), q), multiply(2, a))),\n          ]\n        )\n      ),\n      [\n        set(a, divide(a, d)),\n        set(b, divide(b, d)),\n        set(c, divide(c, d)),\n        set(p, divide(sub(multiply(3, b), multiply(a, a)), 3)),\n        set(p3, divide(p, 3)),\n        set(\n          q,\n          divide(\n            add(multiply(2, a, a, a), multiply(-9, a, b), multiply(27, c)),\n            27\n          )\n        ),\n        set(q2, divide(q, 2)),\n        set(discriminant, add(multiply(q2, q2), multiply(p3, p3, p3))),\n        cond(\n          lessThan(discriminant, 0),\n          [\n            set(mp3, divide(multiply(p, -1), 3)),\n            set(mp33, multiply(mp3, mp3, mp3)),\n            set(r, sqrt(mp33)),\n            set(t, divide(multiply(q, -1), multiply(2, r))),\n            set(\n              cosphi,\n              cond(lessThan(t, -1), -1, cond(greaterThan(t, 1), 1, t))\n            ),\n            set(phi, acos(cosphi)),\n            set(crtr, cuberoot(r)),\n            set(t1, multiply(2, crtr)),\n            set(root1, sub(multiply(t1, cos(divide(phi, 3))), divide(a, 3))),\n            set(\n              root2,\n              sub(\n                multiply(t1, cos(divide(add(phi, 2 * Math.PI), 3))),\n                divide(a, 3)\n              )\n            ),\n            set(\n              root3,\n              sub(\n                multiply(t1, cos(divide(add(phi, 4 * Math.PI), 3))),\n                divide(a, 3)\n              )\n            ),\n          ],\n          cond(\n            eq(discriminant, 0),\n            [\n              set(\n                u1,\n                cond(\n                  lessThan(q2, 0),\n                  cuberoot(multiply(q2, -1)),\n                  multiply(cuberoot(q2), -1)\n                )\n              ),\n              set(root1, sub(multiply(2, u1), divide(a, 3))),\n              set(root2, sub(multiply(-1, u1), divide(a, 3))),\n            ],\n            [\n              set(sd, sqrt(discriminant)),\n              set(u1, cuberoot(sub(sq, q2))),\n              set(v1, cuberoot(add(sq, q2))),\n              set(root1, sub(u1, v1, divide(a, 3))),\n            ]\n          )\n        ),\n      ]\n    ),\n    find([root1, root2, root3], isRootValidForCubicBezier),\n  ]);\n};\n\nexport default cubicBezierSolve;\n"]}