{"version":3,"sources":["Matrix3.ts"],"names":["Animated","atan2","add","multiply","sqrt","cos","sin","sub","divide","pow","tan","exhaustiveCheck","a","Error","identityMatrix","translateXMatrix","x","translateYMatrix","y","scaleMatrix","s","scaleXMatrix","scaleYMatrix","skewXMatrix","skewYMatrix","rotateZMatrix","r","dot3","row","col","matrixVecMul3","m","v","multiply3","m1","m2","col0","col1","col2","processTransform2d","transforms","reduce","acc","transform","key","Object","keys","value","isMatrix3","arg","length","Array","decompose2d","b","c","d","translateX","translateY","E","F","G","H","Q","R","scaleX","scaleY","a1","a2","theta","phi","rotateZ","adjugate","basisToPoints","p1","p2","p3","p4","transform2d","params","canvas","projected","t"],"mappings":"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","sourcesContent":["/* eslint-disable prefer-destructuring */\nimport Animated from \"react-native-reanimated\";\n\nimport { atan2 } from \"./Math\";\nimport { Vector } from \"./Vectors\";\n\nconst { add, multiply, sqrt, cos, sin, sub, divide, pow, tan } = Animated;\n\nexport type Vec3 = readonly [\n  Animated.Adaptable<number>,\n  Animated.Adaptable<number>,\n  Animated.Adaptable<number>\n];\n\nexport type Matrix3 = readonly [Vec3, Vec3, Vec3];\n\ntype Transform2dName =\n  | \"translateX\"\n  | \"translateY\"\n  | \"scale\"\n  | \"skewX\"\n  | \"skewY\"\n  | \"scaleX\"\n  | \"scaleY\"\n  | \"rotateZ\"\n  | \"rotate\";\ntype Transformations = {\n  [Name in Transform2dName]: Animated.Adaptable<number>;\n};\nexport type Transforms2d = (\n  | Pick<Transformations, \"translateX\">\n  | Pick<Transformations, \"translateY\">\n  | Pick<Transformations, \"scale\">\n  | Pick<Transformations, \"scaleX\">\n  | Pick<Transformations, \"scaleY\">\n  | Pick<Transformations, \"skewX\">\n  | Pick<Transformations, \"skewY\">\n  | Pick<Transformations, \"rotateZ\">\n  | Pick<Transformations, \"rotate\">\n)[];\n\nconst exhaustiveCheck = (a: never): never => {\n  throw new Error(`Unexhaustive handling for ${a}`);\n};\n\nconst identityMatrix: Matrix3 = [\n  [1, 0, 0],\n  [0, 1, 0],\n  [0, 0, 1],\n];\n\nconst translateXMatrix = (x: Animated.Adaptable<number>): Matrix3 => [\n  [1, 0, x],\n  [0, 1, 0],\n  [0, 0, 1],\n];\n\nconst translateYMatrix = (y: Animated.Adaptable<number>): Matrix3 => [\n  [1, 0, 0],\n  [0, 1, y],\n  [0, 0, 1],\n];\n\nconst scaleMatrix = (s: Animated.Adaptable<number>): Matrix3 => [\n  [s, 0, 0],\n  [0, s, 0],\n  [0, 0, 1],\n];\n\nconst scaleXMatrix = (s: Animated.Adaptable<number>): Matrix3 => [\n  [s, 0, 0],\n  [0, 1, 0],\n  [0, 0, 1],\n];\n\nconst scaleYMatrix = (s: Animated.Adaptable<number>): Matrix3 => [\n  [1, 0, 0],\n  [0, s, 0],\n  [0, 0, 1],\n];\n\nconst skewXMatrix = (s: Animated.Adaptable<number>): Matrix3 => [\n  [1, tan(s), 0],\n  [0, 1, 0],\n  [0, 0, 1],\n];\n\nconst skewYMatrix = (s: Animated.Adaptable<number>): Matrix3 => [\n  [1, 0, 0],\n  [tan(s), 1, 0],\n  [0, 0, 1],\n];\n\nconst rotateZMatrix = (r: Animated.Adaptable<number>): Matrix3 => [\n  [cos(r), multiply(-1, sin(r)), 0],\n  [sin(r), cos(r), 0],\n  [0, 0, 1],\n];\n\nexport const dot3 = (row: Vec3, col: Vec3) =>\n  add(\n    multiply(row[0], col[0]),\n    multiply(row[1], col[1]),\n    multiply(row[2], col[2])\n  );\n\nexport const matrixVecMul3 = (m: Matrix3, v: Vec3) =>\n  [dot3(m[0], v), dot3(m[1], v), dot3(m[2], v)] as const;\n\nexport const multiply3 = (m1: Matrix3, m2: Matrix3) => {\n  const col0 = [m2[0][0], m2[1][0], m2[2][0]] as const;\n  const col1 = [m2[0][1], m2[1][1], m2[2][1]] as const;\n  const col2 = [m2[0][2], m2[1][2], m2[2][2]] as const;\n  return [\n    [dot3(m1[0], col0), dot3(m1[0], col1), dot3(m1[0], col2)],\n    [dot3(m1[1], col0), dot3(m1[1], col1), dot3(m1[1], col2)],\n    [dot3(m1[2], col0), dot3(m1[2], col1), dot3(m1[2], col2)],\n  ] as const;\n};\n\nexport const processTransform2d = (transforms: Transforms2d) =>\n  transforms.reduce((acc, transform) => {\n    const key = Object.keys(transform)[0] as Transform2dName;\n    const value = (transform as Pick<Transformations, typeof key>)[key];\n    if (key === \"translateX\") {\n      return multiply3(acc, translateXMatrix(value));\n    }\n    if (key === \"translateY\") {\n      return multiply3(acc, translateYMatrix(value));\n    }\n    if (key === \"scale\") {\n      return multiply3(acc, scaleMatrix(value));\n    }\n    if (key === \"scaleX\") {\n      return multiply3(acc, scaleXMatrix(value));\n    }\n    if (key === \"scaleY\") {\n      return multiply3(acc, scaleYMatrix(value));\n    }\n    if (key === \"skewX\") {\n      return multiply3(acc, skewXMatrix(value));\n    }\n    if (key === \"skewY\") {\n      return multiply3(acc, skewYMatrix(value));\n    }\n    if (key === \"rotate\" || key === \"rotateZ\") {\n      return multiply3(acc, rotateZMatrix(value));\n    }\n    return exhaustiveCheck(key);\n  }, identityMatrix);\n\nconst isMatrix3 = (arg: Matrix3 | Transforms2d): arg is Matrix3 =>\n  arg.length === 3 && arg[0] instanceof Array;\n\n// https://math.stackexchange.com/questions/13150/extracting-rotation-scale-values-from-2d-transformation-matrix\nexport const decompose2d = (arg: Matrix3 | Transforms2d) => {\n  const m = isMatrix3(arg) ? arg : processTransform2d(arg);\n  const a = m[0][0];\n  const b = m[1][0];\n  const c = m[0][1];\n  const d = m[1][1];\n  const translateX = m[0][2] as Animated.Node<number>;\n  const translateY = m[1][2] as Animated.Node<number>;\n  const E = divide(add(a, d), 2);\n  const F = divide(sub(a, d), 2);\n  const G = divide(add(c, b), 2);\n  const H = divide(sub(c, b), 2);\n  const Q = sqrt(add(pow(E, 2), pow(H, 2)));\n  const R = sqrt(add(pow(F, 2), pow(G, 2)));\n  const scaleX = add(Q, R);\n  const scaleY = sub(Q, R);\n  const a1 = atan2(G, F);\n  const a2 = atan2(H, E);\n  const theta = divide(sub(a2, a1), 2);\n  const phi = divide(add(a2, a1), 2);\n  return [\n    { translateX },\n    { translateY },\n    { rotateZ: multiply(-1, theta) },\n    { scaleX },\n    { scaleY },\n    { rotateZ: multiply(-1, phi) },\n  ] as const;\n};\n\nconst adjugate = (m: Matrix3) => {\n  return [\n    [\n      sub(multiply(m[1][1], m[2][2]), multiply(m[1][2], m[2][1])),\n      sub(multiply(m[0][2], m[2][1]), multiply(m[0][1], m[2][2])),\n      sub(multiply(m[0][1], m[1][2]), multiply(m[0][2], m[1][1])),\n    ],\n    [\n      sub(multiply(m[1][2], m[2][0]), multiply(m[1][0], m[2][2])),\n      sub(multiply(m[0][0], m[2][2]), multiply(m[0][2], m[2][0])),\n      sub(multiply(m[0][2], m[1][0]), multiply(m[0][0], m[1][2])),\n    ],\n    [\n      sub(multiply(m[1][0], m[2][1]), multiply(m[1][1], m[2][0])),\n      sub(multiply(m[0][1], m[2][0]), multiply(m[0][0], m[2][1])),\n      sub(multiply(m[0][0], m[1][1]), multiply(m[0][1], m[1][0])),\n    ],\n  ] as const;\n};\n\ninterface Quadrilateral {\n  p1: Vector;\n  p2: Vector;\n  p3: Vector;\n  p4: Vector;\n}\n\ninterface Parameters {\n  canvas: Quadrilateral;\n  projected: Quadrilateral;\n}\n\nconst basisToPoints = ({ p1, p2, p3, p4 }: Quadrilateral) => {\n  const m = [\n    [p1.x, p2.x, p3.x],\n    [p1.y, p2.y, p3.y],\n    [1, 1, 1],\n  ] as const;\n  const v = matrixVecMul3(adjugate(m), [p4.x, p4.y, 1]);\n  return multiply3(m, [\n    [v[0], 0, 0],\n    [0, v[1], 0],\n    [0, 0, v[2]],\n  ]);\n};\n\n// https://math.stackexchange.com/questions/296794/finding-the-transform-matrix-from-4-projected-points-with-javascript\n// https://franklinta.com/2014/09/08/computing-css-matrix3d-transforms/\n// http://jsfiddle.net/dFrHS/1/\nexport const transform2d = (params: Parameters) => {\n  const s = basisToPoints(params.canvas);\n  const d = basisToPoints(params.projected);\n  const t = multiply3(d, adjugate(s));\n  return [\n    [\n      divide(t[0][0], t[2][2]),\n      divide(t[0][1], t[2][2]),\n      divide(t[0][2], t[2][2]),\n    ],\n    [\n      divide(t[1][0], t[2][2]),\n      divide(t[1][1], t[2][2]),\n      divide(t[1][2], t[2][2]),\n    ],\n    [divide(t[2][0], t[2][2]), divide(t[2][1], t[2][2]), 1],\n  ] as const;\n};\n"]}