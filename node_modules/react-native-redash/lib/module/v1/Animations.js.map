{"version":3,"sources":["Animations.ts"],"names":["Animated","block","defined","clamp","max","min","decompose2d","Value","set","add","multiply","cond","eq","abs","sub","not","lessThan","greaterThan","divide","modulo","proc","mix","value","x","y","step","edge","smoothstep","edge0","edge1","t","tween2d","t1","t2","d1","d2","translateX","translateY","skewX","rotateZ","scaleX","scaleY","diff","v","stash","prev","diffClamp","a","minVal","maxVal","moving","position","minPositionDelta","emptyFrameThreshold","delta","noMovementFrames","snapPoint","velocity","points","point","diffPoint","p","deltas","map","minDelta","reduce","acc","addTo","node","subTo","multiplyTo","divideTo","moduloTo"],"mappings":"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","sourcesContent":["import Animated, { block, defined } from \"react-native-reanimated\";\n\nimport { clamp, max, min } from \"./Math\";\nimport { Matrix3, Transforms2d, decompose2d } from \"./Matrix3\";\n\nconst {\n  Value,\n  set,\n  add,\n  multiply,\n  cond,\n  eq,\n  abs,\n  sub,\n  not,\n  lessThan,\n  greaterThan,\n  divide,\n  modulo,\n  proc,\n} = Animated;\n\nexport type SpringConfig = Partial<Omit<Animated.SpringConfig, \"toValue\">>;\nexport type TimingConfig = Partial<Omit<Animated.TimingConfig, \"toValue\">>;\n\nexport const mix = proc(\n  (\n    value: Animated.Adaptable<number>,\n    x: Animated.Adaptable<number>,\n    y: Animated.Adaptable<number>\n  ) => add(x, multiply(value, sub(y, x)))\n);\n\nexport const step = proc(\n  (value: Animated.Adaptable<number>, edge: Animated.Adaptable<number>) =>\n    lessThan(value, edge)\n);\n\nexport const smoothstep = proc(\n  (\n    value: Animated.Adaptable<number>,\n    edge0: Animated.Adaptable<number>,\n    edge1: Animated.Adaptable<number>\n  ) => {\n    const t = clamp(divide(sub(value, edge0), sub(edge1, edge0)), 0, 1);\n    return multiply(t, t, sub(3, multiply(2, t)));\n  }\n);\n\nexport const tween2d = (\n  value: Animated.Node<number>,\n  t1: Matrix3 | Transforms2d,\n  t2: Matrix3 | Transforms2d\n) => {\n  const d1 = decompose2d(t1);\n  const d2 = decompose2d(t2);\n  const translateX = mix(value, d1[0].translateX, d2[0].translateX);\n  const translateY = mix(value, d1[1].translateY, d2[1].translateY);\n  const skewX = mix(value, d1[2].rotateZ, d2[2].rotateZ);\n  const scaleX = mix(value, d1[3].scaleX, d2[3].scaleX);\n  const scaleY = mix(value, d1[4].scaleY, d2[4].scaleY);\n  const rotateZ = mix(value, d1[5].rotateZ, d2[5].rotateZ);\n  return [\n    { translateX },\n    { translateY },\n    { rotateZ: skewX },\n    { scaleX },\n    { scaleY },\n    { rotateZ },\n  ] as const;\n};\n\n// currently diffClamp() from reanimated seems currently buggy because of proc()\nexport const diff = (v: Animated.Node<number>) => {\n  const stash = new Value(0);\n  const prev = new Value<number>();\n  return block([\n    set(stash, cond(defined(prev), sub(v, prev), 0)),\n    set(prev, v),\n    stash,\n  ]);\n};\n\nexport const diffClamp = (\n  a: Animated.Node<number>,\n  minVal: Animated.Adaptable<number>,\n  maxVal: Animated.Adaptable<number>\n) => {\n  const value = new Value<number>();\n  return set(\n    value,\n    min(max(add(cond(defined(value), value, a), diff(a)), minVal), maxVal)\n  );\n};\n\nexport const moving = (\n  position: Animated.Node<number>,\n  minPositionDelta = 1e-3,\n  emptyFrameThreshold = 5\n) => {\n  const delta = diff(position);\n  const noMovementFrames = new Value(0);\n  return cond(\n    lessThan(abs(delta), minPositionDelta),\n    [\n      set(noMovementFrames, add(noMovementFrames, 1)),\n      not(greaterThan(noMovementFrames, emptyFrameThreshold)),\n    ],\n    [set(noMovementFrames, 0), 1]\n  );\n};\n\nexport const snapPoint = (\n  value: Animated.Adaptable<number>,\n  velocity: Animated.Adaptable<number>,\n  points: Animated.Adaptable<number>[]\n) => {\n  const point = add(value, multiply(0.2, velocity));\n  const diffPoint = (p: Animated.Adaptable<number>) => abs(sub(point, p));\n  const deltas = points.map((p) => diffPoint(p));\n  const minDelta = min(...deltas);\n  return points.reduce(\n    (acc, p) => cond(eq(diffPoint(p), minDelta), p, acc),\n    new Value()\n  ) as Animated.Node<number>;\n};\n\nexport const addTo = proc(\n  (value: Animated.Value<number>, node: Animated.Adaptable<number>) =>\n    set(value, add(value, node))\n);\n\nexport const subTo = proc(\n  (value: Animated.Value<number>, node: Animated.Adaptable<number>) =>\n    set(value, sub(value, node))\n);\n\nexport const multiplyTo = proc(\n  (value: Animated.Value<number>, node: Animated.Adaptable<number>) =>\n    set(value, multiply(value, node))\n);\n\nexport const divideTo = proc(\n  (value: Animated.Value<number>, node: Animated.Adaptable<number>) =>\n    set(value, divide(value, node))\n);\n\nexport const moduloTo = proc(\n  (value: Animated.Value<number>, node: Animated.Adaptable<number>) =>\n    set(value, modulo(value, node))\n);\n"]}