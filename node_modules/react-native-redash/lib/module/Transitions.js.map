{"version":3,"sources":["Transitions.ts"],"names":["useEffect","useSharedValue","useDerivedValue","withTiming","withSpring","bin","useSpring","state","config","value","transition","useTiming"],"mappings":"AAAA,OAASA,SAAT,KAA0B,OAA1B,CACA,OACEC,cADF,CAEEC,eAFF,CAGEC,UAHF,CAIEC,UAJF,KAKO,yBALP,CAOA,OAASC,GAAT,KAAoB,QAApB,CAEA,MAAO,IAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CACvBC,KADuB,CAEvBC,MAFuB,CAGpB,CACH,GAAMC,CAAAA,KAAK,CAAGR,cAAc,CAAC,CAAD,CAA5B,CACAD,SAAS,CAAC,UAAM,CACdS,KAAK,CAACA,KAAN,CAAc,MAAOF,CAAAA,KAAP,GAAiB,SAAjB,CAA6BF,GAAG,CAACE,KAAD,CAAhC,CAA0CA,KAAxD,CACD,CAFQ,CAEN,CAACA,KAAD,CAAQE,KAAR,CAFM,CAAT,CAGA,GAAMC,CAAAA,UAAU,CAAGR,eAAe,CAAC,UAAM,CACvC,MAAOE,CAAAA,UAAU,CAACK,KAAK,CAACA,KAAP,CAAcD,MAAd,CAAjB,CACD,CAFiC,CAAlC,CAGA,MAAOE,CAAAA,UAAP,CACD,CAZM,CAcP,MAAO,IAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CACvBJ,KADuB,CAEvBC,MAFuB,CAGpB,CACH,GAAMC,CAAAA,KAAK,CAAGR,cAAc,CAAC,CAAD,CAA5B,CACAD,SAAS,CAAC,UAAM,CACdS,KAAK,CAACA,KAAN,CAAc,MAAOF,CAAAA,KAAP,GAAiB,SAAjB,CAA6BF,GAAG,CAACE,KAAD,CAAhC,CAA0CA,KAAxD,CACD,CAFQ,CAEN,CAACA,KAAD,CAAQE,KAAR,CAFM,CAAT,CAGA,GAAMC,CAAAA,UAAU,CAAGR,eAAe,CAAC,UAAM,CACvC,MAAOC,CAAAA,UAAU,CAACM,KAAK,CAACA,KAAP,CAAcD,MAAd,CAAjB,CACD,CAFiC,CAAlC,CAGA,MAAOE,CAAAA,UAAP,CACD,CAZM","sourcesContent":["import { useEffect } from \"react\";\nimport Animated, {\n  useSharedValue,\n  useDerivedValue,\n  withTiming,\n  withSpring,\n} from \"react-native-reanimated\";\n\nimport { bin } from \"./Math\";\n\nexport const useSpring = (\n  state: boolean | number,\n  config?: Animated.WithSpringConfig\n) => {\n  const value = useSharedValue(0);\n  useEffect(() => {\n    value.value = typeof state === \"boolean\" ? bin(state) : state;\n  }, [state, value]);\n  const transition = useDerivedValue(() => {\n    return withSpring(value.value, config);\n  });\n  return transition;\n};\n\nexport const useTiming = (\n  state: boolean | number,\n  config?: Animated.WithTimingConfig\n) => {\n  const value = useSharedValue(0);\n  useEffect(() => {\n    value.value = typeof state === \"boolean\" ? bin(state) : state;\n  }, [state, value]);\n  const transition = useDerivedValue(() => {\n    return withTiming(value.value, config);\n  });\n  return transition;\n};\n"]}