{"version":3,"sources":["Vectors.ts"],"names":["useSharedValue","useVector","x1","y1","x","y","create","vec"],"mappings":"AAAA,OAAmBA,cAAnB,KAAyC,yBAAzC,CAkBA,MAAO,IAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAGkB,IAFzCC,CAAAA,EAEyC,2DAFpC,CAEoC,IADzCC,CAAAA,EACyC,2CACzC,GAAMC,CAAAA,CAAC,CAAGJ,cAAc,CAACE,EAAD,CAAxB,CACA,GAAMG,CAAAA,CAAC,CAAGL,cAAc,CAACG,EAAD,OAACA,EAAD,CAAOD,EAAP,CAAxB,CACA,MAAO,CAAEE,CAAC,CAADA,CAAF,CAAKC,CAAC,CAADA,CAAL,CAAP,CACD,CAPM,CAoBP,GAAMC,CAAAA,MAAc,CAAG,QAAjBA,CAAAA,MAAiB,CAAuCF,CAAvC,CAA8CC,CAA9C,CAAwD,CAC7E,UAD6E,SAE7E,MAAO,CACLD,CAAC,CAAEA,CAAF,OAAEA,CAAF,CAAO,CADH,CAELC,CAAC,OAAEA,CAAF,OAAEA,CAAF,CAAOD,CAAP,aAAY,CAFR,CAAP,CAID,CAND,CAQA,MAAO,IAAMG,CAAAA,GAAG,CAAG,CACjBD,MAAM,CAANA,MADiB,CAAZ","sourcesContent":["import Animated, { useSharedValue } from \"react-native-reanimated\";\n\n/**\n * @summary Type representing a vector\n * @example\n   export interface Vector<T = number> {\n    x: T;\n    y: T;\n  }\n */\nexport interface Vector<T = number> {\n  x: T;\n  y: T;\n}\n\n/**\n * @summary Returns a vector of shared values\n */\nexport const useVector = (\n  x1 = 0,\n  y1?: number\n): Vector<Animated.SharedValue<number>> => {\n  const x = useSharedValue(x1);\n  const y = useSharedValue(y1 ?? x1);\n  return { x, y };\n};\n\ntype Create = {\n  (): Vector<0>;\n  <T extends Animated.Adaptable<number>>(x: T, y?: T): Vector<T>;\n};\n\n/**\n *\n * @param x\n * @param y\n * @worklet\n */\nconst create: Create = <T extends Animated.Adaptable<number>>(x?: T, y?: T) => {\n  \"worklet\";\n  return {\n    x: x ?? 0,\n    y: y ?? x ?? 0,\n  };\n};\n\nexport const vec = {\n  create,\n};\n"]}